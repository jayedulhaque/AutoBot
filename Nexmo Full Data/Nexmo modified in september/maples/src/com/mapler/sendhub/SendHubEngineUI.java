package com.mapler.sendhub;

import com.mapler.ui.*;
import com.mapler.model.SModel;
import com.mapler.service.INotifier;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import javax.swing.SwingUtilities;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

/**
 *
 * @author none
 */
public class SendHubEngineUI extends javax.swing.JPanel implements INotifier {

    public ScheduledExecutorService emailExecutor = Executors.newScheduledThreadPool(10);
    protected ScheduledFuture<?> emailFuture = null;
    private String username;
    private String password;
    private SModel sModel;
    private static Logger log = Logger.getLogger(SendHubEngineUI.class);
    private INotifier iNotifier;
    private SendHubWorker scrapperWorker;
    private String userType;
    private String userId;

    public SendHubEngineUI(String username, String password, String userType, String userId) {
        this.username = username;
        this.password = password;
        this.userType = userType;
        this.userId = userId;
        initComponents();
        initSettings();
    }

    public SModel getsModel() {
        if (sModel == null) {
            sModel = new SModel();
        }
        return sModel;
    }

    public void setsModel(SModel sModel) {
        this.sModel = sModel;
    }

    /**
     * Creates new form EngineUI
     */
    public SendHubEngineUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        start = new javax.swing.JButton();
        end = new javax.swing.JButton();
        message = new javax.swing.JLabel();
        vpnusername = new javax.swing.JTextField();
        vpnpassword = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jBStop = new javax.swing.JButton();
        jTFLimit = new javax.swing.JTextField();
        jLBDate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTFFile = new javax.swing.JTextField();
        start1 = new javax.swing.JButton();
        jCBRepeated = new javax.swing.JCheckBox();
        jTFRepeatTime = new javax.swing.JTextField();
        jTFWaitTime = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTFSendLimit = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        jLabel4.setText("jLabel4");

        start.setText("Send");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        end.setText("Stop & Exit");
        end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endActionPerformed(evt);
            }
        });

        vpnusername.setToolTipText("");

        jLabel5.setText("Username");

        jLabel6.setText("APIKey");

        jBStop.setText("Stop");
        jBStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStopActionPerformed(evt);
            }
        });

        jLBDate.setText("Limit");

        jLabel1.setText("File");

        jTFFile.setToolTipText("");

        start1.setText("Voice");
        start1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start1ActionPerformed(evt);
            }
        });

        jCBRepeated.setText("Repeated");

        jLabel2.setText("Repeat Time");

        jLabel3.setText("Wait Time");

        jLabel7.setText("Limit to send");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLBDate)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTFLimit)
                                .addComponent(vpnpassword)
                                .addComponent(vpnusername)
                                .addComponent(jTFFile)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jCBRepeated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(65, 65, 65)
                                    .addComponent(start1)
                                    .addGap(18, 18, 18)
                                    .addComponent(jBStop)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(end)))
                            .addComponent(jTFRepeatTime, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTFSendLimit, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTFWaitTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)))
                        .addGap(0, 128, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vpnusername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vpnpassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLBDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTFFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFRepeatTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFWaitTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFSendLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(25, 25, 25)
                .addComponent(jCBRepeated)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBStop)
                    .addComponent(end)
                    .addComponent(start)
                    .addComponent(start1))
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        this.getsModel().setEmail(this.vpnusername.getText());
        this.getsModel().setEmailPassword(this.vpnpassword.getText());
        this.getsModel().setFfPath(this.jTFFile.getText());

        if (StringUtils.isNotBlank(this.jTFLimit.getText())) {
            this.getsModel().setLimit(Integer.parseInt(this.jTFLimit.getText()));
        }

        this.getsModel().setStopEngine(false);
        sModel.setUsername(username);
        sModel.setPassword(password);

        scrapperWorker = new SendHubWorker(this.getiNotifier(), this.getsModel());
        scrapperWorker.update();
    }//GEN-LAST:event_startActionPerformed

    private void endActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endActionPerformed
        try {
            Runtime.getRuntime().exec("taskkill /F /IM java.exe");

        } catch (Throwable ex) {
            log.debug("Error " + ex);
        }
    }//GEN-LAST:event_endActionPerformed

    private void jBStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStopActionPerformed
        this.getsModel().setStopEngine(true);
    }//GEN-LAST:event_jBStopActionPerformed

    private void start1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start1ActionPerformed
        this.getsModel().setEmail(this.vpnusername.getText());
        this.getsModel().setEmailPassword(this.vpnpassword.getText());
        this.getsModel().setFfPath(this.jTFFile.getText());
        this.getsModel().setVoice(true);
        if (StringUtils.isNotBlank(this.jTFLimit.getText())) {
            this.getsModel().setLimit(Integer.parseInt(this.jTFLimit.getText()));
        }


        if (StringUtils.isNotBlank(this.jTFRepeatTime.getText())) {
            String[] sendHubRepeatTime = this.jTFRepeatTime.getText().split(",");
            this.getsModel().setSendHubRepeatTime(sendHubRepeatTime);
        }

        if (StringUtils.isNotBlank(this.jTFWaitTime.getText())) {
            String[] timeBefor = this.jTFWaitTime.getText().split(",");
            this.getsModel().setSendHubWaiTimeBeforeSend(timeBefor);
        }
        
        if (StringUtils.isNotBlank(this.jTFSendLimit.getText())) {
            this.getsModel().setSendHubSendLimit(Integer.parseInt(this.jTFSendLimit.getText()));
        }
        
        this.getsModel().setStopEngine(false);
        this.getsModel().setRepeated(jCBRepeated.isSelected());
        sModel.setUsername(username);
        sModel.setPassword(password);

        scrapperWorker = new SendHubWorker(this.getiNotifier(), this.getsModel());
        scrapperWorker.update();
    }//GEN-LAST:event_start1ActionPerformed

    public void initSettings() {
        this.setsModel(null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton end;
    private javax.swing.JButton jBStop;
    private javax.swing.JCheckBox jCBRepeated;
    private javax.swing.JLabel jLBDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTFFile;
    private javax.swing.JTextField jTFLimit;
    private javax.swing.JTextField jTFRepeatTime;
    private javax.swing.JTextField jTFSendLimit;
    private javax.swing.JTextField jTFWaitTime;
    private javax.swing.JLabel message;
    private javax.swing.JButton start;
    private javax.swing.JButton start1;
    private javax.swing.JTextField vpnpassword;
    private javax.swing.JTextField vpnusername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void notify(final String info) {
        try {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    message.setText(info);
                }
            });
        } catch (Throwable ex) {
            log.debug("notify:: Error causes " + ex.getMessage());
        }
    }

    public INotifier getiNotifier() {
        if (iNotifier == null) {
            iNotifier = this;
        }
        return iNotifier;
    }

    public void setiNotifier(INotifier iNotifier) {
        this.iNotifier = iNotifier;
    }

    @Override
    public void write(String info) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
